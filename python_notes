static method and class method:

# Python program to demonstrate 
# use of class method and static method.
from datetime import date
 
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
     
    # a class method to create a Person object by birth year.
    @classmethod
    def fromBirthYear(cls, name, year):
        return cls(name, date.today().year - year)
     
    # a static method to check if a Person is adult or not.
    @staticmethod
    def isAdult(age):
        return age > 18
 
person1 = Person('mayank', 21)
person2 = Person.fromBirthYear('mayank', 1996)
 
print person1.age
print person2.age
 
# print the result
print Person.isAdult(22)
Output

21
21
True

------------------------------------------------------------------------
functins are 1st class argument as we can pass function as argument (eg. in decoration creation).
-------------------------------------------------------------------------
map:
map(function_to_apply, list_of_inputs)

filter:
number_list = range(-5, 5)
less_than_zero = list(filter(lambda x: x < 0, number_list))
print(less_than_zero)

from functools import reduce
product = reduce((lambda x, y: x * y), [1, 2, 3, 4])

# Output: 24

--------------------------------------------------------------------------
lambda syntax:
lambda arguments : expression

---------------------------------------------------------------------------
#!/usr/bin/python

import threading
import time

exitFlag = 0

class myThread (threading.Thread):
   def __init__(self, threadID, name, counter):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
      self.counter = counter
   def run(self):
      print "Starting " + self.name
      print_time(self.name, 5, self.counter)
      print "Exiting " + self.name

def print_time(threadName, counter, delay):
   while counter:
      if exitFlag:
         threadName.exit()
      time.sleep(delay)
      print "%s: %s" % (threadName, time.ctime(time.time()))
      counter -= 1

# Create new threads
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# Start new Threads
thread1.start()
thread2.start()

print "Exiting Main Thread"
--------------------------------------------------------------------------

import multiprocessing
def calc_square(number):
    print('Square': , number * number)
    result = number * number
    print(result)
def calc_quad():
    print('Quad': , number * number * number * number)
if __name__ == "__main__":
    number = 7
    result = None
    p1 = multiprocessing.Process(target=calc_square, args=(number,))
    p2 = multiprocessing.Process(target=calc_quad, args=(number,))
    p1.start()
    p2.start()
    p1.join()
    p2.join()
    
    # Wont print because processes run using their own memory location                     
    print(result)
-------------------------------------------------------------------------
Implementing __getitem__ in a class allows its instances to use the [] (indexer) operators.

class Test(object):
    def __getitem__(self, items):
        print '%-15s  %s' % (type(items), items)

t = Test()
t[1]
t['hello world']
t[1, 'b', 3.0]
t[5:200:10]
t['a':'z':3]
t[object()]

--------------------------------------------------------------------------
Implementing the __call__ magic method in a class causes its instances to become callables -- in other words, those instances now behave like functions. You can use the built-in function callable to test if a particular object is a callable (callable returns True for functions, methods, and objects that have __call__).

class Test(object):
    def __call__(self, *args, **kwargs):
        print args
        print kwargs
        print '-'*40

t = Test()
t(1, 2, 3)
t(a=1, b=2, c=3)
t(4, 5, 6, d=4, e=5, f=6)

Expected output:

(1, 2, 3)
{}
--------------------------------
()
{'a': 1, 'c': 3, 'b': 2}
--------------------------------
(4, 5, 6)
{'e': 5, 'd': 4, 'f': 6}
--------------------------------

You can implement the __call__ magic method like any method or function. The only difference is that invoking it doesn't require a name, just the parentheses.
---------------------------------------------------------------------------------

Introducing __setattr__

Although implementing __setattr__ is not that common of a practice, we thought we'd include a discussion of it for the sake of completeness. Basically, __setattr__ allows you to override Python's default mechanism for member assignment.

class Test(object):
    def __init__(self):
        self.a = 'a'
        self.b = 'b'

    def __setattr__(self, name, value):
        print 'set %s to %s' % (name, repr(value))

        if name in ('a', 'b'):
            object.__setattr__(self, name, value)

t = Test()
t.c = 'z'
setattr(t, 'd', '888')

Expected output:

set a to 'a'
set b to 'b'
set c to 'z'
set d to '888'

It might surprise you to find out that __setattr__ is not symmetrical to __getattr__! In particular, all attribute assignments go through __setattr__, even for variables that are present in the __dict__ magic variable. For this reason, we don't recommend implementing __setattr__.

Implementing __setattr__ can lead to some really nasty-looking code. Because you end up writing the following statement an awful lot: object.__setattr__(self, name, value). If you fine-grained control of member assignment, you are almost always better off using properties instead

---------------------------------------------------------------------------------------------------
** kwargs take keyword arguments and pass as dictionary in function.

---------------------------------------------------------------------------------------------------

Introducing __getattr__

Implementing __getattr__ overrides Python's default mechanism for member access.

class Test(object):
    def __init__(self):
        self.a = 'a'
        self.b = 'b'

    def __getattr__(self, name):
        return 123456

t = Test()
print 'object variables: %r' % t.__dict__.keys()
print t.a
print t.b
print t.c
print getattr(t, 'd')
print hasattr(t, 'x')

Expected output:

object variables: ['a', 'b']
a
b
123456
123456
True

As you can see from the example above, the __getattr__ magic method only gets invoked for attributes that are not in the __dict__ magic attribute. Implementing __getattr__ causes the hasattr built-in function to always return True, unless an exception is raised from within __getattr__.

---------------------------------------------------------------------------------
The %s specifier converts the object using str(), and %r converts it using repr().

----------------------------------------------------------------------------------
stop a class from inheritance


    bool([x])

    Convert a value to a Boolean, using the standard truth testing procedure. If x is false or omitted, this returns False; otherwise it returns True. bool is also a class, which is a subclass of int. Class bool cannot be subclassed further. Its only instances are False and True.

----------------------------------------------------------------------------------
>>> class X:
...     pass
...     
>>> class Y(X):
...     pass
...     
>>> x = X()
>>> y = Y()
>>> isinstance(x, X)  # is object x an instance of class X (or any subclass)?
True
>>> isinstance(x, Y)  # is object x an instance of class Y (or any subclass)?
False
>>> isinstance(y, X)  # is object y an instance of class X (or any subclass)?
True
>>> isinstance(y, Y)  # is object y an instance of class Y (or any subclass)?
True
------------------------------------------------------------------------------------
#operator overloading

import math
 
class Circle:
 
    def __init__(self, radius):
        self.__radius = radius
 
    def setRadius(self, radius):
        self.__radius = radius
 
    def getRadius(self):
        return self.__radius
 
    def area(self):
        return math.pi * self.__radius ** 2
 
    def __add__(self, another_circle):
        return Circle( self.__radius + another_circle.__radius )
 
c1 = Circle(4)
print(c1.getRadius())
 
c2 = Circle(5)
print(c2.getRadius())
 
c3 = c1 + c2 # This became possible because we have overloaded + operator by adding a    method named __add__
print(c3.getRadius())

------------------------------------------------------------------------------------------
>>> print y
[[], [], [], [], 1]
>>> y[0].append(1)
>>> print y
[[1], [1], [1], [1], 1]
>>> 

--------------------------------------------------------------------------------------
